<!-- Focus Panel Main -->
<div class="focus-bg d-flex justify-content-center align-items-center">
  <div class="focus-box position-relative">
    <!-- Bouton X rond custom -->
    <button class="focus-close-btn" id="trigger-exit" aria-label="Fermer">
      <span aria-hidden="true">&times;</span>
    </button>

    <div class="focus-header d-flex justify-content-between align-items-center mb-4">
      <h5 class="mb-0">Focus Panel</h5>
      <a href="https://open.spotify.com" target="_blank" class="btn-spotify d-flex align-items-center">
        <i class="fab fa-spotify mr-2"></i> Spotify
      </a>
    </div>
    <div class="focus-content text-center">
      <h2 class="mb-4"><%= @task.name %></h2>
      <script>
        const subtasks = <%= raw(@task.subtasks.order(:id).pluck(:name, :time).map { |name, time| { name: name, time: time } }.to_json) %>;
      </script>
      <div class="timer-display" id="focus-timer">00:00:00</div>
      <form method="post" action="<%= statistics_path %>" id="focus-form">
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
        <!-- Required Fields -->
        <%= hidden_field_tag :user_id, current_user.id %>
        <%= hidden_field_tag :input_type, "Task" %>
        <%= hidden_field_tag :input_id, @task.id %>

        <!-- Start/End Time -->
        <%= hidden_field_tag :start_time, @task.created_at %>
        <%= hidden_field_tag :end_time, "" %> <!-- will be filled by JS -->

        <!-- Statistic Inputs -->
        <%= hidden_field_tag :input_status, "Completed" %>
        <%= hidden_field_tag :input_rating, 5 %> <!-- static for now -->
        <%= hidden_field_tag :input_performance, "PLACEHOLDER_PERFORMANCE" %> <!-- JS will calculate -->

        <!-- Duration (used by timer JS only) -->
        <%= hidden_field_tag :duration, focus_minutes(@task) %>

        <!-- Subtasks handling -->
        <% @task.subtasks.order(:id).each_with_index do |subtask, index| %>
          <%= hidden_field_tag "subtask_stats[][input_type]", "Subtask" %>
          <%= hidden_field_tag "subtask_stats[][input_id]", subtask.id %>
          <%= hidden_field_tag "subtask_stats[][start_time]", subtask.created_at %>
          <%= hidden_field_tag "subtask_stats[][end_time]", "" %> <!-- Will be filled by JS -->
        <% end %>
        <button type="button" id="finish-btn" class="btn button-or mt-4 d-none">Register Stats</button>
        <%# <button type="submit" id="finish-btn" class="btn button-or mt-4 d-none" onclick="finalizeStatistic(); document.getElementById('focus-form').submit();">Register Stats</button> %>
        <%# <button class="focus-close-btn" onclick="finalizeStatistic(); document.getElementById('focus-form').submit();" aria-label="Fermer"> %>
      </form>
    </div>
  </div>
</div>

<!-- MODAL pop-up (Bootstrap) -->
<div class="modal fade" id="endTaskModal" tabindex="-1" aria-labelledby="endTaskModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content text-center">
      <div class="modal-header">
        <h5 class="modal-title" id="endTaskModalLabel">üéâ Task Completed!</h5>
      </div>
      <div class="modal-body">
        <p>Well done! You have completed "<%= @task.name %>"!</p>
      </div>
    </div>
  </div>
</div>

<%# Subtasks MODAL %>
<% @task.subtasks.order(:id).each_with_index do |subtask, index| %>
  <div class="modal fade" id="subtaskModal<%= index %>" tabindex="-1" aria-labelledby="subtaskModalLabel<%= index %>" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content text-center">
        <div class="modal-header">
          <h5 class="modal-title" id="subtaskModalLabel<%= index %>">‚è±Ô∏è Time to finish the current subtask.</h5>
        </div>
        <div class="modal-body">
          <p>You have completed: "<%= subtask.name %>"</p>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- Rating + Status Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content text-center">
      <div class="modal-header">
        <h5 class="modal-title" id="feedbackModalLabel">How did it go?</h5>
      </div>
      <div class="modal-body">
        <p>Rate your task performance and status.</p>

        <div class="mb-3">
          <label class="form-label">Rating:</label><br>
          <% 1.upto(5) do |star| %>
            <button type="button" class="btn btn-outline-warning btn-sm rating-btn" data-rating="<%= star %>"><%= star %></button>
          <% end %>
        </div>

        <div class="mb-3">
          <label class="form-label">Status:</label><br>
          <button type="button" class="btn btn-outline-secondary status-btn" data-status="Incomplete">Incomplete</button>
          <button type="button" class="button-completed status-btn" data-status="Completed">Completed</button>
        </div>

        <button type="button" class="btn button-or mt-2" id="submit-feedback-btn">Submit</button>
      </div>
    </div>
  </div>
</div>

<audio id="notification-sound" src="<%= asset_path('end_timer.ogg') %>" preload="auto"></audio>

<script>
  function startFocusTimer() {
    let duration = parseInt(document.querySelector('input[name="duration"]').value || "25", 10) * 60;
    const display = document.getElementById('focus-timer');
    const finishBtn = document.getElementById('finish-btn');
    const form = document.getElementById("focus-form");
    let timerId = null;
    let elapsed = 0;
    const sound = document.getElementById("notification-sound");
    let actionToConfirm = null;
    let selectedRating = 5;
    let selectedStatus = "Completed";

    // Set timers for each subtask
    if (typeof subtasks !== "undefined") {
      let cumulative = 0;

      subtasks.forEach((subtask, index) => {
        cumulative += subtask.time * 60;

        setTimeout(() => {
          // Skip sound if it's the last subtask
          if (index < subtasks.length - 1) {
            sound.play();
          }
          const popup = new bootstrap.Modal(document.getElementById(`subtaskModal${index}`));
          popup.show();
        }, cumulative * 1000);
      });
    }

    function finalizeStatistic() {
      const endTimeInput = document.querySelector('input[name="end_time"]');
      const performanceInput = document.querySelector('input[name="input_performance"]');

      const now = new Date().toISOString();
      endTimeInput.value = now;

      const startTime = new Date(document.querySelector('input[name="start_time"]').value);
      const endTime = new Date();
      const taskTimeInMinutes = parseInt(document.querySelector('input[name="duration"]').value || "25", 10);
      const accomplishTimeInMinutes = (endTime - startTime) / 60000.0;
      let timeUsage = 1 - ((taskTimeInMinutes - accomplishTimeInMinutes) / taskTimeInMinutes);
      timeUsage = Math.max(0, Math.min(timeUsage, 1)); // Clamp between 0 and 1
      let effectiveness = 1 - ((0.2 * timeUsage) - 0.16);
      effectiveness = Math.max(0, Math.min(effectiveness, 1)); // Clamp
      const performance = Math.round(effectiveness * 100);
      performanceInput.value = performance;

      document.querySelectorAll('input[name="subtask_stats[][end_time]"]').forEach(input => input.value = now);
    }

    function updateTimer() {
      let h = Math.floor(duration / 3600);
      let m = Math.floor((duration % 3600) / 60);
      let s = duration % 60;
      display.textContent = `${h.toString().padStart(2,'0')}:${m.toString().padStart(2,'0')}:${s.toString().padStart(2,'0')}`;
      if (duration > 0) {
        duration--;
        elapsed++;
        timerId = setTimeout(updateTimer, 1000);
      } else {
        finalizeStatistic();
        finishBtn.classList.remove("d-none");
        sound.play();
        let endModal = new bootstrap.Modal(document.getElementById('endTaskModal'));
        endModal.show();
      }
    }

    if (window.focusPanelTimerId) clearTimeout(window.focusPanelTimerId);
    window.focusPanelTimerId = setTimeout(updateTimer, 0);

    // Send Stats
    finishBtn.addEventListener("click", () => {
      actionToConfirm = "submit";
      confirmationModal.show();
    });

    const confirmationModal = new bootstrap.Modal(document.getElementById("confirmationModal"));

    document.getElementById("trigger-exit")?.addEventListener("click", function () {
      actionToConfirm = "exit";
      confirmationModal.show();
    });

    document.getElementById("trigger-submit")?.addEventListener("click", function () {
      actionToConfirm = "submit";
      confirmationModal.show();
    });

    document.getElementById("confirmAction")?.addEventListener("click", function () {
      if (actionToConfirm === "submit") {
        finalizeStatistic();
        document.getElementById("focus-form").submit();
      } else if (actionToConfirm === "exit") {
        window.location.href = "/tasks";
      }
    });

    // Set rating buttons
    document.querySelectorAll(".rating-btn").forEach(button => {
      button.addEventListener("click", () => {
        selectedRating = parseInt(button.dataset.rating, 10);
        document.querySelectorAll(".rating-btn").forEach(b => b.classList.remove("active"));
        button.classList.add("active");
      });
    });

    // Set status buttons
    document.querySelectorAll(".status-btn").forEach(button => {
      button.addEventListener("click", () => {
        selectedStatus = button.dataset.status;
        document.querySelectorAll(".status-btn").forEach(b => b.classList.remove("active"));
        button.classList.add("active");
      });
    });

    // Confirm feedback and submit
    document.getElementById("submit-feedback-btn").addEventListener("click", () => {
      document.querySelector('input[name="input_rating"]').value = selectedRating;
      document.querySelector('input[name="input_status"]').value = selectedStatus;

      confirmationModal.hide();
      finalizeStatistic();
      form.submit();
    });
  }

  document.addEventListener("turbo:load", startFocusTimer);
  document.addEventListener("DOMContentLoaded", startFocusTimer);
</script>
